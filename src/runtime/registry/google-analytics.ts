// WARNING: This file is automatically generated, do not manually modify.
import { withQuery } from 'ufo'
import type { DataLayer, GTag } from 'third-party-capital'
import { useRegistryScript } from '#nuxt-scripts-utils'
import type { RegistryScriptInput } from '#nuxt-scripts'
import { object, string, optional } from '#nuxt-scripts-validator'

export const GoogleAnalyticsOptions = object({
  id: string(),
  l: optional(string()),
})
export type GoogleAnalyticsInput = RegistryScriptInput<typeof GoogleAnalyticsOptions>

function use(options: GoogleAnalyticsInput) {
  const gtag: GTag = function (...args: Parameters<GTag>) {
    ((window as any)['gtag-' + (options.l ?? 'dataLayer')] as GTag)(...args)
  } as GTag
  return { dataLayer: (window as any)[options.l ?? 'dataLayer'] as DataLayer,
    gtag }
}

export function useScriptGoogleAnalytics(_options?: GoogleAnalyticsInput) {
  return useRegistryScript<ReturnType<typeof use>, typeof GoogleAnalyticsOptions>(_options?.key || 'googleAnalytics', options => ({
    scriptInput: {
      src: withQuery('https://www.googletagmanager.com/gtag/js', { id: options?.id, l: options?.l }),
    },
    schema: import.meta.dev ? GoogleAnalyticsOptions : undefined,
    scriptOptions: {
      use: () => use(options),
      stub: import.meta.client ? undefined : ({ fn }) => { return fn === 'dataLayer' ? [] : void 0 },
      performanceMarkFeature: 'nuxt-third-parties-ga',
      ...({ tagPriority: 1 }),
    },
    // eslint-disable-next-line
        // @ts-ignore
    // eslint-disable-next-line
        clientInit: import.meta.server ? undefined : () => {window[(options?.l ?? "dataLayer")]=window[(options?.l ?? "dataLayer")]||[];window['gtag-'+(options?.l ?? "dataLayer")]=function (){window[(options?.l ?? "dataLayer")].push(arguments);};window['gtag-'+(options?.l ?? "dataLayer")]('js',new Date());window['gtag-'+(options?.l ?? "dataLayer")]('config',(options?.id ))},
  }), _options)
}
