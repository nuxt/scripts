// WARNING: This file is automatically generated, do not manually modify.
import { withQuery } from 'ufo'
import type { DataLayer } from 'third-party-capital'
import { defu } from 'defu'
import { useRegistryScript } from '#nuxt-scripts-utils'
import type { RegistryScriptInput } from '#nuxt-scripts'
import { object, string, optional } from '#nuxt-scripts-validator'

declare global {
  interface Window {
    [key: string]: any
  }
}
export const GoogleAnalyticsOptions = object({ id: string(), l: optional(string()) })
export type GoogleAnalyticsInput = RegistryScriptInput<typeof GoogleAnalyticsOptions>

function use(options: GoogleAnalyticsInput) {
  return { dataLayer: window[options.l!] as DataLayer,
    gtag(...args: any[]) { (window[options.l!] as DataLayer).push(args) } }
}

export function useScriptGoogleAnalytics(_options?: GoogleAnalyticsInput) {
  _options = defu(_options, { l: 'defaultGa' })
  return useRegistryScript<ReturnType<typeof use>, typeof GoogleAnalyticsOptions>(_options?.key || 'googleAnalytics', options => ({
    scriptInput: {
      src: withQuery('https://www.googletagmanager.com/gtag/js', { id: options?.id, l: options?.l }),
    },
    schema: import.meta.dev ? GoogleAnalyticsOptions : undefined,
    scriptOptions: {
      use: () => use(options),
      stub: import.meta.client ? undefined : ({ fn }) => { return fn === 'dataLayer' ? [] : void 0 },
      performanceMarkFeature: 'nuxt-third-parties-ga',
      ...({ tagPriority: 1 }),
    },
    // eslint-disable-next-line
        clientInit: import.meta.server ? undefined : () => {window[options.l!]=window[options.l!]||[];window[options.l!].push({'js':new Date()});window[options.l!].push({'config':options.id!})},
  }), _options)
}
